SBOX = {
    0x00: 0x63, 0x01: 0x7c, 0x02: 0x77, 0x03: 0x7b, 0x04: 0xf2, 0x05: 0x6b, 0x06: 0x6f, 0x07: 0xc5,
    0x08: 0x30, 0x09: 0x01, 0x0a: 0x67, 0x0b: 0x2b, 0x0c: 0xfe, 0x0d: 0xd7, 0x0e: 0xab, 0x0f: 0x76,
    0x10: 0xca, 0x11: 0x82, 0x12: 0xc9, 0x13: 0x7d, 0x14: 0xfa, 0x15: 0x59, 0x16: 0x47, 0x17: 0xf0,
    0x18: 0xad, 0x19: 0xd4, 0x1a: 0xa2, 0x1b: 0xaf, 0x1c: 0x9c, 0x1d: 0xa4, 0x1e: 0x72, 0x1f: 0xc0,
    0x20: 0xb7, 0x21: 0xfd, 0x22: 0x93, 0x23: 0x26, 0x24: 0x36, 0x25: 0x3f, 0x26: 0xf7, 0x27: 0xcc,
    0x28: 0x34, 0x29: 0xa5, 0x2a: 0xe5, 0x2b: 0xf1, 0x2c: 0x71, 0x2d: 0xd8, 0x2e: 0x31, 0x2f: 0x15,
    0x30: 0x04, 0x31: 0xc7, 0x32: 0x23, 0x33: 0xc3, 0x34: 0x18, 0x35: 0x96, 0x36: 0x05, 0x37: 0x9a,
    0x38: 0x07, 0x39: 0x12, 0x3a: 0x80, 0x3b: 0xe2, 0x3c: 0xeb, 0x3d: 0x27, 0x3e: 0xb2, 0x3f: 0x75,
    0x40: 0x09, 0x41: 0x83, 0x42: 0x2c, 0x43: 0x1a, 0x44: 0x1b, 0x45: 0x6e, 0x46: 0x5a, 0x47: 0xa0,
    0x48: 0x52, 0x49: 0x3b, 0x4a: 0xd6, 0x4b: 0xb3, 0x4c: 0x29, 0x4d: 0xe3, 0x4e: 0x2f, 0x4f: 0x84,
    0x50: 0x53, 0x51: 0xd1, 0x52: 0x00, 0x53: 0xed, 0x54: 0x20, 0x55: 0xfc, 0x56: 0xb1, 0x57: 0x5b,
    0x58: 0x6a, 0x59: 0xcb, 0x5a: 0xbe, 0x5b: 0x39, 0x5c: 0x4a, 0x5d: 0x4c, 0x5e: 0x58, 0x5f: 0xcf,
    0x60: 0xd0, 0x61: 0xef, 0x62: 0xaa, 0x63: 0xfb, 0x64: 0x43, 0x65: 0x4d, 0x66: 0x33, 0x67: 0x85,
    0x68: 0x45, 0x69: 0xf9, 0x6a: 0x02, 0x6b: 0x7f, 0x6c: 0x50, 0x6d: 0x3c, 0x6e: 0x9f, 0x6f: 0xa8,
    0x70: 0x51, 0x71: 0xa3, 0x72: 0x40, 0x73: 0x8f, 0x74: 0x92, 0x75: 0x9d, 0x76: 0x38, 0x77: 0xf5,
    0x78: 0xbc, 0x79: 0xb6, 0x7a: 0xda, 0x7b: 0x21, 0x7c: 0x10, 0x7d: 0xff, 0x7e: 0xf3, 0x7f: 0xd2,
    0x80: 0xcd, 0x81: 0x0c, 0x82: 0x13, 0x83: 0xec, 0x84: 0x5f, 0x85: 0x97, 0x86: 0x44, 0x87: 0x17,
    0x88: 0xc4, 0x89: 0xa7, 0x8a: 0x7e, 0x8b: 0x3d, 0x8c: 0x64, 0x8d: 0x5d, 0x8e: 0x19, 0x8f: 0x73,
    0x90: 0x60, 0x91: 0x81, 0x92: 0x4f, 0x93: 0xdc, 0x94: 0x22, 0x95: 0x2a, 0x96: 0x90, 0x97: 0x88,
    0x98: 0x46, 0x99: 0xee, 0x9a: 0xb8, 0x9b: 0x14, 0x9c: 0xde, 0x9d: 0x5e, 0x9e: 0x0b, 0x9f: 0xdb,
    0xa0: 0xe0, 0xa1: 0x32, 0xa2: 0x3a, 0xa3: 0x0a, 0xa4: 0x49, 0xa5: 0x06, 0xa6: 0x24, 0xa7: 0x5c,
    0xa8: 0xc2, 0xa9: 0xd3, 0xaa: 0xac, 0xab: 0x62, 0xac: 0x91, 0xad: 0x95, 0xae: 0xe4, 0xaf: 0x79,
    0xb0: 0xe7, 0xb1: 0xc8, 0xb2: 0x37, 0xb3: 0x6d, 0xb4: 0x8d, 0xb5: 0xd5, 0xb6: 0x4e, 0xb7: 0xa9,
    0xb8: 0x6c, 0xb9: 0x56, 0xba: 0xf4, 0xbb: 0xea, 0xbc: 0x65, 0xbd: 0x7a, 0xbe: 0xae, 0xbf: 0x08,
    0xc0: 0xba, 0xc1: 0x78, 0xc2: 0x25, 0xc3: 0x2e, 0xc4: 0x1c, 0xc5: 0xa6, 0xc6: 0xb4, 0xc7: 0xc6,
    0xc8: 0xe8, 0xc9: 0xdd, 0xca: 0x74, 0xcb: 0x1f, 0xcc: 0x4b, 0xcd: 0xbd, 0xce: 0x8b, 0xcf: 0x8a,
    0xd0: 0x70, 0xd1: 0x3e, 0xd2: 0xb5, 0xd3: 0x66, 0xd4: 0x48, 0xd5: 0x03, 0xd6: 0xf6, 0xd7: 0x0e,
    0xd8: 0x61, 0xd9: 0x35, 0xda: 0x57, 0xdb: 0xb9, 0xdc: 0x86, 0xdd: 0xc1, 0xde: 0x1d, 0xdf: 0x9e,
    0xe0: 0xe1, 0xe1: 0xf8, 0xe2: 0x98, 0xe3: 0x11, 0xe4: 0x69, 0xe5: 0xd9, 0xe6: 0x8e, 0xe7: 0x94,
    0xe8: 0x9b, 0xe9: 0x1e, 0xea: 0x87, 0xeb: 0xe9, 0xec: 0xce, 0xed: 0x55, 0xee: 0x28, 0xef: 0xdf,
    0xf0: 0x8c, 0xf1: 0xa1, 0xf2: 0x89, 0xf3: 0x0d, 0xf4: 0xbf, 0xf5: 0xe6, 0xf6: 0x42, 0xf7: 0x68,
    0xf8: 0x41, 0xf9: 0x99, 0xfa: 0x2d, 0xfb: 0x0f, 0xfc: 0xb0, 0xfd: 0x54, 0xfe: 0xbb, 0xff: 0x16
}

RCON = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]

def gf_mul(a, b):
    """
    Multiplicación en GF(2^8) con el polinomio irreducible 0x11b.
    """
    p = 0
    for i in range(8):
        if b & 1:
            p ^= a
        hi_bit_set = a & 0x80
        a = (a << 1) & 0xff
        if hi_bit_set:
            a ^= 0x1b
        b >>= 1
    return p

def print_hex_matrix(matrix):
    for row in matrix:
        print(" ".join(f"{b:02X}" for b in row))
        
def add_round_key(matrix_message, matrix_key):
        matrix_result = [[0 for i in range(4)] for j in range(4)]
        for i in range(4):
                for j in range(4):
                        matrix_result[i][j] = matrix_message[i][j] ^ matrix_key[i][j]
        return matrix_result

def sub_bytes(matrix):
        matrix_result = [[SBOX[b] for b in row] for row in matrix]
        return matrix_result

def shift_rows(matrix):
        for i in range(4):
                matrix[i] = matrix[i][i:] + matrix[i][:i]
        return matrix
        
def mix_columns(matrix):
    """
    Aplica la transformación MixColumns a una matriz 4x4 (estado) que está almacenada en orden de filas.
    La operación se realiza por columnas, por lo que primero se extraen las columnas,
    se les aplica la transformación y luego se vuelve a rearmar la matriz en orden de filas.
    """
    # Extraer las columnas de la matriz (estado)
    columns = [[matrix[r][c] for r in range(4)] for c in range(4)]
    
    new_columns = []
    for col in columns:
        new_col = [
            gf_mul(0x2, col[0]) ^ gf_mul(0x3, col[1]) ^ col[2] ^ col[3],
            col[0] ^ gf_mul(0x2, col[1]) ^ gf_mul(0x3, col[2]) ^ col[3],
            col[0] ^ col[1] ^ gf_mul(0x2, col[2]) ^ gf_mul(0x3, col[3]),
            gf_mul(0x3, col[0]) ^ col[1] ^ col[2] ^ gf_mul(0x2, col[3])
        ]
        new_columns.append(new_col)
    
    # Volver a transponer: construir la matriz resultado en orden de filas
    new_matrix = [[new_columns[c][r] for c in range(4)] for r in range(4)]
    return new_matrix

def calculate_keys(key):
    # 1. Convertir la clave en una lista de palabras (columnas)
    general_key = [list(key[i*4:(i+1)*4]) for i in range(4)]
    
    # 2. Generar 40 palabras adicionales (total 44)
    for i in range(4, 44):
        temp = general_key[i-1].copy()
        
        if i % 4 == 0:
            # Operaciones para palabras múltiplos de 4
            # a. RotWord
            temp.append(temp[0])
            temp.pop(0)
            
            # b. SubWord
            temp = [SBOX[b] for b in temp]
            
            # c. XOR con RCON
            temp[0] ^= RCON[(i//4) - 1]
        
        # d. XOR con la palabra 4 posiciones antes
        new_word = [general_key[i-4][j] ^ temp[j] for j in range(4)]
        general_key.append(new_word)
    
    return general_key
                        
###########################################################################################################


key = "000102030405060708090a0b0c0d0e0f"
message = "00112233445566778899aabbccddeeff"

key = bytes.fromhex(key)
message = bytes.fromhex(message)

matrix_key = [[key[i + 4 * j] for j in range(4)] for i in range(4)]
matrix_message = [[message[i + 4 * j] for j in range(4)] for i in range(4)]


# AddRoundKey Inicial
matrix_result = add_round_key(matrix_message, matrix_key)
# Matriz tras el primer AddRoundKey
print("AddRoundKey:")
print_hex_matrix(matrix_result)
print()
general_key_matrix = calculate_keys(key)
# print_hex_matrix(general_key_matrix)
# Bucle principal
counter = 4
for i in range(9):
        matrix_result = sub_bytes(matrix_result)
        print("SubBytes:")
        print_hex_matrix(matrix_result)
        print()

        matrix_result = shift_rows(matrix_result)
        print("ShiftRows:")
        print_hex_matrix(matrix_result)
        print()

        matrix_result = mix_columns(matrix_result)
        print("MixColumns:")
        print_hex_matrix(matrix_result)
        print()

        # calculo las siguientes keys
        for col in range(4):
            word = general_key_matrix[counter + col]
            for row in range(4):
                matrix_key[row][col] = word[row]
        matrix_result = add_round_key(matrix_result, matrix_key)
        print("AddRoundKey:")
        print_hex_matrix(matrix_result)
        print()

        counter += 4
        print("//////////////////////////////////////")
# Última ronda
matrix_result = sub_bytes(matrix_result)
matrix_result = shift_rows(matrix_result)
for col in range(4):
    word = general_key_matrix[counter + col]
    for row in range(4):
        matrix_key[row][col] = word[row]
matrix_result = add_round_key(matrix_result, matrix_key)

print_hex_matrix(matrix_result)