import { describe, test, expect } from "vitest";
import { CheckAttack } from "../src/ejercicio-7";

describe('CheckAttack', () => {
        test('Non Valid Dimensions', () => {
                expect(CheckAttack([
                        ['-', 'W'],
                        ['-', 'B']
                ])).toBeUndefined();
        });
        test('Non Valid Dimensions', () => {
                expect(CheckAttack([
                        ['-', 'W', 'W'],
                        ['-', 'B', 'B']
                ])).toBeUndefined();
        });
        test('More than one queen', () => {
                expect(CheckAttack([
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', 'B', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['B', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', 'W']
                        ])).toBeUndefined();
        });
        test('No queens', () => {
                expect(CheckAttack([
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-']
                ])).toBeUndefined();
        });
        test('Valid Attack', () => {
                expect(CheckAttack([
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', 'B', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', 'W']
                        ])).toBeTruthy();
        });
        test('Invalid Attack', () => {
                expect(CheckAttack([
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', 'B', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', 'W', '-']
                        ])).toBeFalsy();
        });


});